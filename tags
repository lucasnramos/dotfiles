!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
"	src/.config/nvim/init.vim	/^inoremap " ""<left>$/;"	m
'	src/.config/nvim/init.vim	/^inoremap ' ''<left>$/;"	m
(	src/.config/nvim/init.vim	/^inoremap ( ()<left>$/;"	m
) awesome.quit	src/.config/awesome/rc.lua	/^   { "quit", function() awesome.quit() end },$/;"	f
) awful.spawn	src/.config/awesome/rc.lua	/^    awful.key({ modkey }, "d", function() awful.spawn("rofi -show drun") end,$/;"	f
) awful.spawn	src/.config/awesome/rc.lua	/^    awful.key({ modkey }, "p", function() awful.spawn("dmenu_run") end,$/;"	f
) hotkeys_popup.show_help	src/.config/awesome/rc.lua	/^   { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },$/;"	f
<C-Down>	src/.config/nvim/init.vim	/^noremap <silent> <C-Down> :resize -5<CR>$/;"	m
<C-Left>	src/.config/nvim/init.vim	/^noremap <silent> <C-Left> :vertical resize +5<CR>$/;"	m
<C-Right>	src/.config/nvim/init.vim	/^noremap <silent> <C-Right> :vertical resize -5<CR>$/;"	m
<C-Space>	src/.config/nvim/init.vim	/^inoremap <silent><expr> <C-Space> coc#refresh()$/;"	m
<C-Up>	src/.config/nvim/init.vim	/^noremap <silent> <C-Up> :resize +5<CR>$/;"	m
<C-b>	src/.config/nvim/init.vim	/^map <C-b> :NERDTreeToggle<CR>$/;"	m
<C-h>	src/.config/nvim/init.vim	/^nnoremap <C-h> <C-w>h$/;"	m
<C-j>	src/.config/nvim/init.vim	/^nnoremap <C-j> <C-w>j$/;"	m
<C-k>	src/.config/nvim/init.vim	/^nnoremap <C-k> <C-w>k$/;"	m
<C-l>	src/.config/nvim/init.vim	/^nnoremap <C-l> <C-w>l$/;"	m
<C-p>	src/.config/nvim/init.vim	/^map <C-p> "*p$/;"	m
<C-p>	src/.config/nvim/init.vim	/^nnoremap <C-p> :FuzzyOpen<CR>$/;"	m
<C-y>	src/.config/nvim/init.vim	/^map <C-y> "*y$/;"	m
<S-TAB>	src/.config/nvim/init.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	src/.config/nvim/init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<cr>	src/.config/nvim/init.vim	/^  imap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<cr>	src/.config/nvim/init.vim	/^  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>c	src/.config/nvim/init.vim	/^nnoremap <leader>c :tabnew $MYVIMRC<CR>$/;"	m
<leader>p	src/.config/nvim/init.vim	/^map <leader>p "+p$/;"	m
<leader>r	src/.config/nvim/init.vim	/^nnoremap <leader>r :so $MYVIMRC<CR>$/;"	m
<leader>y	src/.config/nvim/init.vim	/^map <leader>y "+y$/;"	m
[	src/.config/nvim/init.vim	/^inoremap [ []<left>$/;"	m
[g	src/.config/nvim/init.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	src/.config/nvim/init.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
__git_eread	src/.local/scripts/git-prompt.sh	/^__git_eread ()$/;"	f
__git_ps1	src/.local/scripts/git-prompt.sh	/^__git_ps1 ()$/;"	f
__git_ps1_colorize_gitstring	src/.local/scripts/git-prompt.sh	/^__git_ps1_colorize_gitstring ()$/;"	f
__git_ps1_show_upstream	src/.local/scripts/git-prompt.sh	/^__git_ps1_show_upstream ()$/;"	f
__git_sequencer_status	src/.local/scripts/git-prompt.sh	/^__git_sequencer_status ()$/;"	f
all_outputs_configured	src/.local/scripts/dmenu-xrandr	/^function all_outputs_configured() {$/;"	f
asktype	src/.local/scripts/dmenu-mount	/^asktype() { \\$/;"	f
awful.key({ modkey,           }, "t",      function (c) c.ontop 	src/.config/awesome/rc.lua	/^    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,$/;"	f
bail	src/.local/scripts/dmenu-xrandr	/^function bail() {$/;"	f
check_back_space	src/.config/nvim/init.vim	/^function! s:check_back_space() abort$/;"	f
choose_contrast_color	src/.config/awesome/themes/gtk/theme.lua	/^local function choose_contrast_color(reference, candidate1, candidate2)  -- luacheck: no unused$/;"	f
client.connect_signal("focus", function(c) c.border_color 	src/.config/awesome/rc.lua	/^client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)$/;"	f
client.connect_signal("unfocus", function(c) c.border_color 	src/.config/awesome/rc.lua	/^client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)$/;"	f
create_callback 	src/.config/awesome/themes/gtk/theme.lua	/^    create_callback = function(self, c)$/;"	f
darker	src/.config/awesome/themes/gtk/theme.lua	/^local function darker(color_value, darker_n)$/;"	f
darker	src/.config/awesome/themes/xresources/theme.lua	/^local function darker(color_value, darker_n)$/;"	f
g:NERDTreeShowHidden	src/.config/nvim/init.vim	/^let g:NERDTreeShowHidden=1$/;"	v
gd	src/.config/nvim/init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
get_cpu	src/.local/scripts/dwm-bar	/^get_cpu() $/;"	f
get_date	src/.local/scripts/dwm-bar	/^get_date()$/;"	f
get_disk_usage	src/.local/scripts/dwm-bar	/^get_disk_usage()$/;"	f
get_mem	src/.local/scripts/dwm-bar	/^get_mem()$/;"	f
getmount	src/.local/scripts/dmenu-mount	/^getmount() { \\$/;"	f
gi	src/.config/nvim/init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	src/.config/nvim/init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	src/.config/nvim/init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
if type(wallpaper) 	src/.config/awesome/rc.lua	/^        if type(wallpaper) == "function" then$/;"	f
is_dark	src/.config/awesome/themes/gtk/theme.lua	/^local function is_dark(color_value)$/;"	f
list_configured_outputs	src/.local/scripts/dmenu-xrandr	/^function list_configured_outputs() {$/;"	f
list_unconfigured_outputs	src/.local/scripts/dmenu-xrandr	/^function list_unconfigured_outputs() {$/;"	f
local rounded_rect_shape 	src/.config/awesome/themes/gtk/theme.lua	/^local rounded_rect_shape = function(cr,w,h)$/;"	f
main	src/.local/scripts/dmenu-xrandr	/^function main() {$/;"	f
menu_select	src/.local/scripts/dmenu-xrandr	/^function menu_select() {$/;"	f
mix	src/.config/awesome/themes/gtk/theme.lua	/^local function mix(color1, color2, ratio)$/;"	f
mountandroid	src/.local/scripts/dmenu-mount	/^mountandroid() { \\$/;"	f
mountusb	src/.local/scripts/dmenu-mount	/^mountusb() { \\$/;"	f
move_sinks_to_new_default	src/.local/scripts/i3/volume	/^function move_sinks_to_new_default {$/;"	f
print_block	src/.local/scripts/i3/volume	/^function print_block {$/;"	f
print_format	src/.local/scripts/i3/volume	/^function print_format {$/;"	f
reduce_contrast	src/.config/awesome/themes/gtk/theme.lua	/^local function reduce_contrast(color, ratio)$/;"	f
select_mode	src/.local/scripts/dmenu-xrandr	/^function select_mode() {$/;"	f
select_position	src/.local/scripts/dmenu-xrandr	/^function select_position() {$/;"	f
select_rotation	src/.local/scripts/dmenu-xrandr	/^function select_rotation() {$/;"	f
set_default_playback_device_next	src/.local/scripts/i3/volume	/^function set_default_playback_device_next {$/;"	f
set_wallpaper	src/.config/awesome/rc.lua	/^local function set_wallpaper(s)$/;"	f
t) awful.tag.viewnext	src/.config/awesome/rc.lua	/^                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),$/;"	f
t) awful.tag.viewprev	src/.config/awesome/rc.lua	/^                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)$/;"	f
t) t:view_only	src/.config/awesome/rc.lua	/^                    awful.button({ }, 1, function(t) t:view_only() end),$/;"	f
theme.wallpaper 	src/.config/awesome/themes/gtk/theme.lua	/^theme.wallpaper = function(s)$/;"	f
{	src/.config/nvim/init.vim	/^inoremap { {}<left>$/;"	m
{;<CR>	src/.config/nvim/init.vim	/^inoremap {;<CR> {<CR>};<ESC>O$/;"	m
{<CR>	src/.config/nvim/init.vim	/^inoremap {<CR> {<CR>}<ESC>O$/;"	m
